%{
    #include <stdio.h>
    #include "ast.hpp"
    #include "primitive.hpp"
    #include "symtab.hpp"
    #include "classhierarchy.hpp"
    #define YYDEBUG 1

    extern Program_ptr ast;
    int yylex(void);
    void yyerror(const char *);
%}


/* Enables verbose error messages */
%error-verbose

/* WRITE ME: put all your token definitions here */
%token T_Int
%token T_Cid
%token T_Vid
%token T_AssVid
%token T_Mid
%token T_return
%token T_Print
%token T_If
%token T_Then
%token T_Bool
%token T_From
%token T_Not
%token T_And
%token T_Type
%token T_Nothing
%token T_Integer
%token T_Boolean
/* WRITE ME: put all your type definitions here */
%type <u_program> Start
%type <u_class_list> Classes
%type <u_class> Class 
%type <u_declaration_list> Variables
%type <u_declaration> Variable
%type <u_method_list> Methods
%type <u_variableid_list> Initializers
%type <u_type> Type
//%type <u_classname> T_Cid
//%type <u_classid> 
/* WRITE ME: put all your precedence/associativity rules here */
%left T_And
%right T_Not 
%left '<' "<="
%left '+' '-'
%left '*' '/'
%left '(' ')'
%right T_Neg  
%%

/* WRITE ME: This is a simple calculator language with additions and subtractions.
             You need to put the productions for the grammar for the language for
             this project here */
             
Start       : Classes  {$$ = new ProgramImpl($1); ast = $$;}
            ;                 
        
Classes     : Classes Class {$$ = $1; $1->push_back($2);}
            | Class {$$ = new list<Class_ptr>; $$->push_back($1);}
            ;

Class       : T_Cid '{'Variables Methods '}'';' { $$= new ClassImpl( new ClassIDImpl(new ClassName($1.u_base_charptr)), new ClassIDImpl(NULL), $3, $4); }
            | T_Cid T_From T_Cid '{'Variables Methods '}' ';' { $$= new ClassImpl( new ClassIDImpl(new ClassName($1.u_base_charptr)), new ClassIDImpl(new ClassName($3.u_base_charptr)), $5, $6); }
            ;   

Variables   : Variables Variable {$$ = $1; $1->push_back($2);}
            |                    {$$ = new list<Declaration_ptr>;}
            ;

Variable    : Initializers ':' Type ';' {$$ = new  DeclarationImpl($1, $3);}
            ;

Initializers: Initializers ',' T_Vid  {$$ = $1; $1->push_back(new VariableIDImpl (new SymName($3.u_base_charptr)));}
            | T_Vid                   {$$ = new list<VariableID_ptr>; $$->push_back(new VariableIDImpl (new SymName($1.u_base_charptr)));}
            ;

Type        : T_Integer  {$$= new TInteger();}
            | T_Boolean  {$$= new TBoolean();}
            | T_Cid      {$$= new TObject($1.u_classid)}
            ;

Methods     : Methods Method    {$$ = NULL;}
            | 
            ;

Method      : T_Mid Arguments ')' ':' RType '{' MethodBody '}'';' 
            ;           

MethodBody  : Variables Statements T_return RValue ';'
            ;


Arguments   : Arguments ',' Parameter
            | Parameter
            |
            ;


Parameter   : T_Vid ':' Type
            ;


Statements  : Statements Statement 
            | 
            ;

Statement   : Assignment
            | Print 
            | If
            ;

RValue      : Expression
            |
            ;

RType       : Type
            | T_Nothing
            ;

Assignment  : T_AssVid Expression ';'
            ;

Print       : T_Print Expression ';'
            ;

If          : T_If Expression T_Then Statement
            ;


Expression  : Expression '*' Expression
            | Expression '/' Expression
            | Expression '+' Expression
            | Expression '-' Expression
            | Expression '<' Expression
            | Expression "<=" Expression
            | Expression T_And Expression
            | T_Not Expression
            | '-' Expression %prec T_Neg
            | T_Vid '.' T_Mid ExpressionList ')' 
            | T_Cid '.' T_Mid ExpressionList ')'            
            | T_Mid ExpressionList ')' 
            | T_Vid 
            | T_Int
            | T_Bool 
            ; 

ExpressionList : ExpressionList ',' Expression
                | Expression
                |
                ;

/*
May have to use this in the future
ExpressionListP : ',' Expression ExpressionListP
                |
                ;
*/


        
%%

/*You shouldn't have to do anything past this*/

extern int yylineno;

void yyerror(const char *s) {
    fprintf(stderr, "%s at line %d\n", s, yylineno);
    exit(0);
}